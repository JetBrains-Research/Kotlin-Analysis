{
    "cells": [
        {
            "cell_type": "code",
            "execution_count": 2,
            "id": "a94709b1",
            "metadata": {},
            "outputs": [],
            "source": [
                "import numpy as np\n",
                "\n",
                "\n",
                "\n",
                "import plt.pyplot as plt\n",
                "\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 6,
            "id": "ba80b93e",
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "[[-1.   -0.75 -0.5 ]\n",
                        " [-0.25  0.    0.25]\n",
                        " [ 0.5   0.75  1.  ]]\n"
                    ]
                }
            ],
            "source": [
                "x = np.linspace(-2, 2, 9).reshape((3,3))\n",
                "print(x / 2)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "id": "c1342c15",
            "metadata": {},
            "outputs": [],
            "source": [
                "print('hello')"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 7,
            "id": "29486a6f",
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "[[2.    1.125 0.5  ]\n",
                        " [0.125 0.    0.125]\n",
                        " [0.5   1.125 2.   ]]\n"
                    ]
                }
            ],
            "source": [
                "def foo(x: int = 1):\n",
                "    assert(isinstance(x, np.ndarray))\n",
                "    return x * x / 2\n",
                "\n",
                "print(foo(x))"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 12,
            "id": "d044558a",
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "[\"It's class A\", \"It's class A\"]\n"
                    ]
                }
            ],
            "source": [
                "class A:\n",
                "    def __init__(self):\n",
                "        self.string = \"It's class A\"\n",
                "\n",
                "\n",
                "def create_a():\n",
                "    a = A()\n",
                "    return a\n",
                "\n",
                "lots_of_A = [create_a().string for _ in range(100)]\n",
                "\n",
                "\n",
                "\n",
                "\n",
                "\n",
                "\n",
                "\n",
                "print(lots_of_A[3:5])"
            ]
        },
        {
            "cell_type": "markdown",
            "id": "ac589d01",
            "metadata": {},
            "source": [
                "# That's all!"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3 (ipykernel)",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.9.4"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 5
}